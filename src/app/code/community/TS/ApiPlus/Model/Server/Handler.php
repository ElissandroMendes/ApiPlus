<?php
/**
 * Tiago Sampaio
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category  TS
 * @package   TS_ApiPlus
 *
 * @copyright Copyright (c) 2016 Tiago Sampaio. (http://tiagosampaio.com)
 * @license   https://opensource.org/licenses/MIT The MIT License
 *
 * @author    Tiago Sampaio <tiago@tiagosampaio.com>
 */
class TS_ApiPlus_Model_Server_Handler extends Mage_Api_Model_Server_Handler
{

    use TS_ApiPlus_Trait_Data;


    /**
     * Call resource functionality
     *
     * @param string $sessionId
     * @param string $apiPath
     * @param array  $args
     * @return mixed
     */
    public function callSimple($apiPath, $args = array())
    {
        list($resourceName, $methodName) = explode('.', $apiPath);

        if (empty($resourceName) || empty($methodName)) {
            /** @todo Return 404 */
            $this->_fault('resource_path_invalid');
            return $this;
        }
        
        $resourcesAlias = $this->_getConfig()->getResourcesAlias();
        $resources      = $this->_getConfig()->getResources();
        if (isset($resourcesAlias->$resourceName)) {
            $resourceName = (string) $resourcesAlias->$resourceName;
        }
        
        if (!isset($resources->$resourceName) || !isset($resources->$resourceName->methods->$methodName)) {
            /** @todo Return 404 */
            $this->_fault('resource_path_invalid');
            return $this;
        }
        
        if (!isset($resources->$resourceName->public)
            && isset($resources->$resourceName->acl)
            && !$this->_isAllowed((string)$resources->$resourceName->acl)) {
            /** @todo Return 503 */
            $this->_fault('access_denied');
        }
        
        
        if (!isset($resources->$resourceName->methods->$methodName->public)
            && isset($resources->$resourceName->methods->$methodName->acl)
            && !$this->_isAllowed((string)$resources->$resourceName->methods->$methodName->acl)) {
            /** @todo Return 503 */
            $this->_fault('access_denied');
        }
        
        $methodInfo = $resources->$resourceName->methods->$methodName;
        
        try {
            $method    = (isset($methodInfo->method) ? (string) $methodInfo->method : $methodName);
            $modelName = $this->_prepareResourceModelName((string) $resources->$resourceName->model);

            try {
                $model = Mage::getModel($modelName);

                if ($model instanceof Mage_Api_Model_Resource_Abstract) {
                    $model->setResourceConfig($resources->$resourceName);
                }
            } catch (Exception $e) {
                /** @todo Return 503 */
                throw new Mage_Api_Exception('resource_path_not_callable');
            }
            
            if (method_exists($model, $method)) {
                if (isset($methodInfo->arguments) && ((string)$methodInfo->arguments) == 'array') {
                    return $model->$method((is_array($args) ? $args : array($args)));
                } elseif (!is_array($args)) {
                    return $model->$method($args);
                } else {
                    return call_user_func_array(array(&$model, $method), $args);
                }
            } else {
                /** @todo Return 503 */
                throw new Mage_Api_Exception('resource_path_not_callable');
            }
        } catch (Mage_Api_Exception $e) {
            $this->_fault($e->getMessage(), $resourceName, $e->getCustomMessage());
        } catch (Exception $e) {
            Mage::logException($e);
            /** @todo Return 503 */
            $this->_fault('internal', null, $e->getMessage());
        }

        return $this;
    }


    /**
     * Dispatch webservice fault
     *
     * @param string $faultName
     * @param string $resourceName
     * @param string $customMessage
     */
    protected function _fault($faultName, $resourceName = null, $customMessage = null)
    {
        $faults = $this->_getConfig()->getFaults($resourceName);

        if (isset($faults[$faultName])) {
            $fault = (array) $faults[$faultName];
        } else {
            $fault = (array) $faults['unknown'];
        }

        $httpCode = isset($fault['http_code']) ? $fault['http_code'] : $this->_getDefaultHttpErrorCode();
        $message  = isset($fault['message'])   ? $fault['message']   : $this->_getDefaultHttpErrorMessage();

        if (!is_null($customMessage)) {
            $message = $customMessage;
        }

        throw Mage::exception('TS_ApiPlus', $message, $httpCode);
    }


    /**
     * @return int
     */
    protected function _getDefaultHttpErrorCode()
    {
        return TS_ApiPlus_Model_Http_Response::HTTP_INTERNAL_SERVER_ERROR;
    }


    /**
     * @return string
     */
    protected function _getDefaultHttpErrorMessage()
    {
        return $this->helper()->__('There was a problem in the request.');
    }


    /**
     * Retrieve webservice configuration
     *
     * @return TS_ApiPlus_Model_Config
     */
    protected function _getConfig()
    {
        return Mage::getSingleton('ts_apiplus/config');
    }

}
